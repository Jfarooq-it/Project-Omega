AWSTemplateFormatVersion: 2010-09-09
Description: Linux Academy - AWS Essentials [Project Omega]


Parameters:

  # Project Name
    ProjectName:
      Description: Name of the Project
      Type: String

  # Project VPC CIDR
    VPCCIDR:
      Description: IP Range for the Project.
      Type: String
      Default: 10.0.0.0/16

   # Project Public Subnet 1
    PublicSubnet1CIDR:
      Description: An IPv4 CIDR block to associate with the VPC.
      Type: String
      Default: 10.0.0.0/24

  # Project Public Subnet 2
    PublicSubnet2CIDR:
      Description: An IPv4 CIDR block to associate with the VPC.
      Type: String
      Default: 10.0.1.0/24

  # Project Private Subnet 1
    PrivateSubnet1CIDR:
      Description: An IPv4 CIDR block to associate with the VPC.
      Type: String
      Default: 10.0.2.0/24

  # Project Private Subnet 2
    PrivateSubnet2CIDR:
      Description: An IPv4 CIDR block to associate with the VPC.
      Type: String
      Default: 10.0.3.0/24


  # Project S3 Bucket
    S3BucketName:
      Description: S3 Bucket Name.
      Type: String
      Default: S3 Bucket
  












Resources:

# Creating VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: !Ref VPCCIDR
      EnableDnsHostnames: true
    # tag
      Tags:
        - 
          Key: Name  
          Value: !Sub ${ProjectName} VPC
          

# Adding Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
    # tag
      Tags:
        -
          Key: Name
          Value: !Ref ProjectName

# Adding InternetGatewayAttachment  
# (required with Internet Gateway)
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

      
# Adding Public Subnet 1
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: "us-east-1a"
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - 
          Key: Name
          Value: !Sub ${ProjectName} Public Subnet 1

# Adding Public Subnet 2
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: "us-east-1b"
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - 
          Key: Name
          Value: !Sub ${ProjectName} Public Subnet 2

# Adding Private Subnet 1
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: "us-east-1a"
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - 
          Key: Name
          Value: !Sub ${ProjectName} Private Subnet 1


# Adding Private Subnet 2
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: "us-east-1b"
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - 
          Key: Name
          Value: !Sub ${ProjectName} Private Subnet 2


# Adding PUBLIC Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - 
          Key: Name
          Value: !Sub ${ProjectName} Public Routes

# Public Routing Rule  (Send all traffic to Internet Gateway)
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0  # Rule: send all traffic to Internet Gateway. (next line)
      GatewayId: !Ref InternetGateway

#  Attaching Public Subnet 1 to (Public Route) Subnet Associations 
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1   

 #  Attaching Public Subnet 2 to (Public Route) Subnet Associations 
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2



# Adding PRIVATE Route Table
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref VPC
      Tags: 
        - 
          Key: Name
          Value: !Sub ${ProjectName} Private Route

#   # Default Routing Rule - Private Subnet Rule
#   DefaultPrivateRoute1:
#     Type: AWS::EC2::Route
#     Properties:
#       RouteTableId: !Ref PrivateRouteTable1
#     #  DestinationCidrBlock: 0.0.0.0/0  # send all traffic to Nat Gateway (keep in inside the VPC)
#     #  NatGatewayId: !Ref NatGateway1
  
  #  Attaching Private Subnet 1 to (Private Route) Subnet Associations 
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1
  
 #  Attaching Private Subnet 2 to (Private Route) Subnet Associations 
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet2



 #  Creating NACL
  NetACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags: 
        - 
          Key: "Name"
          Value: !Sub ${ProjectName} NACL

 # Network Access Rules [Egress = FALSE for INBOUND traffic and TRUE for OUTBOUND traffic]

 # INBOUND Rule # 1
  NetworkAclEntry1:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0     # allowing everything
      NetworkAclId: !Ref NetACL
      RuleNumber: '100'
      Protocol: "-1"      # -1 for everything
      RuleAction: allow   # allow or deny
      Egress: 'false'   # FALSE for INBOUND traffic and TRUE for OUTBOUND traffic.
      PortRange:
        From: '0'
        To: '65535'
        
 # INBOUND Rule # 2
  # NetworkAclEntry2:
  #   Type: AWS::EC2::NetworkAclEntry
  #   Properties:      
  #     CidrBlock: 0.0.0.0/0  
  #     NetworkAclId: !Ref NetACL
  #     RuleNumber: '110'
  #     Protocol: "-1"
  #     RuleAction: allow
  #     Egress: 'false'   # FALSE for INBOUND traffic and TRUE for OUTBOUND traffic.
  #     PortRange:
  #       From: '0'
  #       To: '65535'
      

 # OUTBOUND Rule # 1
  NetworkAclEntry2:
    Type: AWS::EC2::NetworkAclEntry
    Properties:      
      CidrBlock: 0.0.0.0/0  
      NetworkAclId: !Ref NetACL
      RuleNumber: '100'
      Protocol: "-1"
      RuleAction: allow
      Egress: 'true'   # FALSE for INBOUND traffic and TRUE for OUTBOUND traffic.
      PortRange:
        From: '0'
        To: '65535'


 # Creating S3 Bucket   
  S3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      AccessControl: PublicRead
      BucketName: !Ref S3BucketName
      Tags: 
        - 
          Key: "Name"
          Value: !Sub ${ProjectName} S3 Bucket



 #####  Security Group for EC2 Instance  #####
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our hosts and/Or SSH
      GroupName: !Sub ${ProjectName} EC2 Security Group
      VpcId: !Ref VPC
      # Inbound Rule 1
      SecurityGroupIngress:
      - IpProtocol: -1
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0
      # Inbound Rule 2 (FOR SSH)
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0

      # Outbound Rule 1
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0
      Tags: 
        - 
          Key: "Name"
          Value: !Sub ${ProjectName} EC2 Security Group

#####  EC2 Instance  #####
  EC2Instance:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      ImageId: ami-07d0cf3af28718ef8
      InstanceType: t2.medium
      KeyName: GeneralKeyPair
     # IamInstanceProfile: arn:aws:iam::0000000000:instance-profile/s3-read-only-role   # Iam role for s3
      SecurityGroups:
      - Ref: EC2SecurityGroup
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: '10'   # 10 GB Hard Drive Space
          DeleteOnTermination: "true"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install apache2 -y
          systemctl start apache2.service
      
      
#####  EC2 Instance Auto Scaling  #####
  EC2AutoScaling:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub ${ProjectName} Auto Scaling Group
      VPCZoneIdentifier: 
      - 
        !Ref PublicSubnet1   
      -
        !Ref PublicSubnet2
      LaunchConfigurationName: !Ref EC2Instance
      MinSize: 1
      MaxSize: 2
      
      